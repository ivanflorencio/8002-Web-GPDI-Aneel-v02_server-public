// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace PeD.Data.Migrations
{
    [DbContext(typeof(GestorDbContext))]
    [Migration("20191108140939_DemandaFormFile")]
    partial class DemandaFormFile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PeD.Models.AlocacaoRh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpresaId");

                    b.Property<int?>("EtapaId");

                    b.Property<int>("HrsMes1");

                    b.Property<int?>("HrsMes10");

                    b.Property<int?>("HrsMes11");

                    b.Property<int?>("HrsMes12");

                    b.Property<int?>("HrsMes13");

                    b.Property<int?>("HrsMes14");

                    b.Property<int?>("HrsMes15");

                    b.Property<int?>("HrsMes16");

                    b.Property<int?>("HrsMes17");

                    b.Property<int?>("HrsMes18");

                    b.Property<int?>("HrsMes19");

                    b.Property<int>("HrsMes2");

                    b.Property<int?>("HrsMes20");

                    b.Property<int?>("HrsMes21");

                    b.Property<int?>("HrsMes22");

                    b.Property<int?>("HrsMes23");

                    b.Property<int?>("HrsMes24");

                    b.Property<int>("HrsMes3");

                    b.Property<int>("HrsMes4");

                    b.Property<int>("HrsMes5");

                    b.Property<int>("HrsMes6");

                    b.Property<int?>("HrsMes7");

                    b.Property<int?>("HrsMes8");

                    b.Property<int?>("HrsMes9");

                    b.Property<string>("Justificativa");

                    b.Property<int?>("ProjetoId");

                    b.Property<int?>("RecursoHumanoId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EtapaId");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("RecursoHumanoId");

                    b.ToTable("AlocacoesRh");
                });

            modelBuilder.Entity("PeD.Models.AlocacaoRm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpresaFinanciadoraId");

                    b.Property<int?>("EmpresaRecebedoraId");

                    b.Property<int?>("EtapaId");

                    b.Property<string>("Justificativa");

                    b.Property<int?>("ProjetoId");

                    b.Property<int>("Qtd");

                    b.Property<int?>("RecursoMaterialId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaFinanciadoraId");

                    b.HasIndex("EmpresaRecebedoraId");

                    b.HasIndex("EtapaId");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("RecursoMaterialId");

                    b.ToTable("AlocacoesRm");
                });

            modelBuilder.Entity("PeD.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Cpf");

                    b.Property<int?>("EmpresaId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DataAtualizacao");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("FotoPerfilId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NomeCompleto");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RazaoSocial");

                    b.Property<string>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UltimoLogin");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FotoPerfilId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PeD.Models.AtividadesGestao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApoioCitenel");

                    b.Property<string>("BuscaAnterioridade");

                    b.Property<string>("ContratacaoAuditoria");

                    b.Property<string>("DedicacaoHorario");

                    b.Property<string>("DesenvFerramenta");

                    b.Property<string>("DivulgacaoResultados");

                    b.Property<string>("ParticipacaoMembros");

                    b.Property<string>("ParticipacaoTecnicos");

                    b.Property<int>("ProjetoId");

                    b.Property<string>("ProspTecnologica");

                    b.Property<string>("ResApoioCitenel");

                    b.Property<string>("ResBuscaAnterioridade");

                    b.Property<string>("ResContratacaoAuditoria");

                    b.Property<string>("ResDedicacaoHorario");

                    b.Property<string>("ResDesenvFerramenta");

                    b.Property<string>("ResDivulgacaoResultados");

                    b.Property<string>("ResParticipacaoMembros");

                    b.Property<string>("ResParticipacaoTecnicos");

                    b.Property<string>("ResProspTecnologica");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId")
                        .IsUnique();

                    b.ToTable("AtividadesGestao");
                });

            modelBuilder.Entity("PeD.Models.Atividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatalogCategoriaContabilGestaoId");

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoriaContabilGestaoId");

                    b.ToTable("Atividade");
                });

            modelBuilder.Entity("PeD.Models.CategoriaContabil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("CategoriaContabil");
                });

            modelBuilder.Entity("PeD.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj");

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("PeD.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("CatalogEstados");
                });

            modelBuilder.Entity("PeD.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("CatalogPaises");
                });

            modelBuilder.Entity("PeD.Models.FaseCadeiaProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("FaseCadeiaProduto");
                });

            modelBuilder.Entity("PeD.Models.CatalogProdutoTipoDetalhado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogProdutoFaseCadeiaId");

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CatalogProdutoFaseCadeiaId");

                    b.ToTable("CatalogProdutoTipoDetalhado");
                });

            modelBuilder.Entity("PeD.Models.Segmento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Segmentos");
                });

            modelBuilder.Entity("PeD.Models.CatalogStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CatalogStatus");
                });

            modelBuilder.Entity("PeD.Models.SubTema", b =>
                {
                    b.Property<int>("SubTemaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogTemaId");

                    b.Property<string>("Nome");

                    b.Property<int>("Order");

                    b.Property<string>("Valor");

                    b.HasKey("SubTemaId");

                    b.HasIndex("CatalogTemaId");

                    b.ToTable("CatalogSubTemas");
                });

            modelBuilder.Entity("PeD.Models.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<int>("Order");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Tema");
                });

            modelBuilder.Entity("PeD.Models.CatalogUserPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.ToTable("CatalogUserPermissoes");
                });

            modelBuilder.Entity("PeD.Models.Demandas.Demanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CriadorId");

                    b.Property<int>("EtapaAtual");

                    b.Property<int>("EtapaStatus");

                    b.Property<string>("RevisorId");

                    b.Property<string>("SuperiorDiretoId");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("CriadorId");

                    b.HasIndex("RevisorId");

                    b.HasIndex("SuperiorDiretoId");

                    b.ToTable("Demandas");
                });

            modelBuilder.Entity("PeD.Models.Demandas.DemandaComentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DemandaId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DemandaId");

                    b.HasIndex("UserId");

                    b.ToTable("DemandaComentarios");
                });

            modelBuilder.Entity("PeD.Models.Demandas.DemandaFormFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DemandaFormId");

                    b.Property<int?>("DemandaFormValuesId");

                    b.Property<int?>("FileId");

                    b.HasKey("Id");

                    b.HasIndex("DemandaFormValuesId");

                    b.HasIndex("FileId");

                    b.ToTable("DemandaFormFiles");
                });

            modelBuilder.Entity("PeD.Models.Demandas.DemandaFormValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("DemandaId");

                    b.Property<string>("FormKey");

                    b.HasKey("Id");

                    b.ToTable("DemandaFormValues");
                });

            modelBuilder.Entity("PeD.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpresaId");

                    b.Property<int?>("CatalogEstadoId");

                    b.Property<int>("Classificacao");

                    b.Property<string>("Cnpj");

                    b.Property<int>("ProjetoId");

                    b.Property<string>("RazaoSocial");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("CatalogEstadoId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("PeD.Models.Etapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AtividadesRealizadas");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("date");

                    b.Property<string>("Desc");

                    b.Property<int>("Duracao");

                    b.Property<string>("Nome");

                    b.Property<int>("ProjetoId");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Etapas");
                });

            modelBuilder.Entity("PeD.Models.EtapaMes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EtapaId");

                    b.Property<DateTime>("Mes");

                    b.HasKey("Id");

                    b.HasIndex("EtapaId");

                    b.ToTable("EtapaMeses");
                });

            modelBuilder.Entity("PeD.Models.EtapaProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EtapaId");

                    b.Property<int?>("ProdutoId");

                    b.HasKey("Id");

                    b.HasIndex("EtapaId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("EtapaProdutos");
                });

            modelBuilder.Entity("PeD.Models.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FileName");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("PeD.Models.FotoPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("File");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("FotoPerfil");
                });

            modelBuilder.Entity("PeD.Models.LogProjeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Acao");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ProjetoId");

                    b.Property<string>("StatusAnterior");

                    b.Property<string>("StatusNovo");

                    b.Property<string>("Tela");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("UserId");

                    b.ToTable("LogProjetos");
                });

            modelBuilder.Entity("PeD.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatalogProdutoFaseCadeiaId");

                    b.Property<int?>("CatalogProdutoTipoDetalhadoId");

                    b.Property<int>("Classificacao");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Desc");

                    b.Property<int?>("FaseCadeia");

                    b.Property<int>("ProjetoId");

                    b.Property<int>("Tipo");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("CatalogProdutoFaseCadeiaId");

                    b.HasIndex("CatalogProdutoTipoDetalhadoId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("PeD.Models.Projeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aplicabilidade");

                    b.Property<bool?>("AvaliacaoInicial");

                    b.Property<int?>("EmpresaId");

                    b.Property<int?>("CatalogSegmentoId");

                    b.Property<int?>("CatalogStatusId");

                    b.Property<string>("Codigo");

                    b.Property<int?>("CompartResultados");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<string>("Motivacao");

                    b.Property<string>("Numero");

                    b.Property<string>("Originalidade");

                    b.Property<string>("Pesquisas");

                    b.Property<string>("Razoabilidade");

                    b.Property<string>("Relevancia");

                    b.Property<int>("Tipo");

                    b.Property<string>("Titulo");

                    b.Property<string>("TituloDesc");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("CatalogSegmentoId");

                    b.HasIndex("CatalogStatusId");

                    b.ToTable("Projetos");
                });

            modelBuilder.Entity("PeD.Models.RecursoHumano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf");

                    b.Property<int>("EmpresaId");

                    b.Property<int>("Funcao");

                    b.Property<bool?>("GerenteProjeto");

                    b.Property<int>("Nacionalidade");

                    b.Property<string>("NomeCompleto");

                    b.Property<string>("Passaporte");

                    b.Property<int?>("ProjetoId");

                    b.Property<int>("Titulacao");

                    b.Property<string>("UrlCurriculo");

                    b.Property<decimal>("ValorHora")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("RecursoHumanos");
                });

            modelBuilder.Entity("PeD.Models.RecursoMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatalogAtividadeId");

                    b.Property<int?>("CatalogCategoriaContabilGestaoId");

                    b.Property<int>("CategoriaContabil");

                    b.Property<string>("Especificacao");

                    b.Property<string>("Nome");

                    b.Property<int?>("ProjetoId");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogAtividadeId");

                    b.HasIndex("CatalogCategoriaContabilGestaoId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("RecursoMateriais");
                });

            modelBuilder.Entity("PeD.Models.RegistroFinanceiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AtividadeRealizada");

                    b.Property<string>("Beneficiado");

                    b.Property<int?>("CatalogAtividadeId");

                    b.Property<int?>("CatalogCategoriaContabilGestaoId");

                    b.Property<int?>("CategoriaContabil");

                    b.Property<string>("CnpjBeneficiado");

                    b.Property<DateTime?>("DataDocumento")
                        .HasColumnType("date");

                    b.Property<int?>("EmpresaFinanciadoraId");

                    b.Property<int?>("EmpresaRecebedoraId");

                    b.Property<bool?>("EquiparLabExistente");

                    b.Property<bool?>("EquiparLabNovo");

                    b.Property<string>("EspecificacaoTecnica");

                    b.Property<string>("FuncaoRecurso");

                    b.Property<bool?>("ItemNacional");

                    b.Property<DateTime?>("Mes")
                        .HasColumnType("date");

                    b.Property<string>("NomeItem");

                    b.Property<string>("NumeroDocumento");

                    b.Property<int?>("ProjetoId");

                    b.Property<int?>("QtdHrs");

                    b.Property<int?>("QtdItens");

                    b.Property<int?>("RecursoHumanoId");

                    b.Property<int?>("RecursoMaterialId");

                    b.Property<int?>("Status");

                    b.Property<int?>("Tipo");

                    b.Property<int?>("TipoDocumento");

                    b.Property<decimal?>("ValorUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogAtividadeId");

                    b.HasIndex("CatalogCategoriaContabilGestaoId");

                    b.HasIndex("EmpresaFinanciadoraId");

                    b.HasIndex("EmpresaRecebedoraId");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("RecursoHumanoId");

                    b.HasIndex("RecursoMaterialId");

                    b.ToTable("RegistrosFinanceiros");
                });

            modelBuilder.Entity("PeD.Models.RegistroObs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("RegistroFinanceiroId");

                    b.Property<string>("Texto");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RegistroFinanceiroId");

                    b.HasIndex("UserId");

                    b.ToTable("RegistroObs");
                });

            modelBuilder.Entity("PeD.Models.RelatorioFinal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AplicabilidadePrevista");

                    b.Property<string>("DescAbrangencia");

                    b.Property<string>("DescAmbito");

                    b.Property<string>("DescAtividades");

                    b.Property<string>("DescTecnica");

                    b.Property<string>("DescTestes");

                    b.Property<string>("EspecificacaoProduto");

                    b.Property<string>("JustificativaAplicabilidade");

                    b.Property<string>("JustificativaProduto");

                    b.Property<string>("JustificativaTecnica");

                    b.Property<bool?>("ProdutoAlcancado");

                    b.Property<int>("ProjetoId");

                    b.Property<bool?>("TecnicaPrevista");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId")
                        .IsUnique();

                    b.ToTable("RelatorioFinal");
                });

            modelBuilder.Entity("PeD.Models.ResultadoCapacitacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaPesquisa");

                    b.Property<string>("CnpjInstituicao");

                    b.Property<bool?>("Conclusao");

                    b.Property<DateTime>("DataConclusao");

                    b.Property<int>("ProjetoId");

                    b.Property<int>("RecursoHumanoId");

                    b.Property<int>("Tipo");

                    b.Property<string>("TituloTrabalho");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("RecursoHumanoId");

                    b.ToTable("ResultadosCapacitacao");
                });

            modelBuilder.Entity("PeD.Models.ResultadoEconomico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc");

                    b.Property<decimal?>("Percentagem")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProjetoId");

                    b.Property<int>("Tipo");

                    b.Property<string>("UnidadeBase");

                    b.Property<decimal?>("ValorBeneficio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ValorIndicador")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ResultadosEconomico");
                });

            modelBuilder.Entity("PeD.Models.ResultadoInfra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaPesquisa");

                    b.Property<string>("CnpjReceptora");

                    b.Property<string>("ListaMateriais");

                    b.Property<string>("NomeLaboratorio");

                    b.Property<int>("ProjetoId");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ResultadosInfra");
                });

            modelBuilder.Entity("PeD.Models.ResultadoIntelectual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataPedido");

                    b.Property<string>("NumeroPedido");

                    b.Property<int>("ProjetoId");

                    b.Property<int>("Tipo");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ResultadosIntelectual");
                });

            modelBuilder.Entity("PeD.Models.ResultadoIntelectualDepositante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpresaId");

                    b.Property<decimal>("Entidade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ResultadoIntelectualId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ResultadoIntelectualId");

                    b.ToTable("ResultadoIntelectualDepositantes");
                });

            modelBuilder.Entity("PeD.Models.ResultadoIntelectualInventor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RecursoHumanoId");

                    b.Property<int>("ResultadoIntelectualId");

                    b.HasKey("Id");

                    b.HasIndex("RecursoHumanoId");

                    b.HasIndex("ResultadoIntelectualId");

                    b.ToTable("ResultadoIntelectualInventores");
                });

            modelBuilder.Entity("PeD.Models.ResultadoProducao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogPaisId");

                    b.Property<string>("Cidade");

                    b.Property<bool?>("Confirmacao");

                    b.Property<DateTime>("DataPublicacao");

                    b.Property<string>("Nome");

                    b.Property<int>("ProjetoId");

                    b.Property<int>("Tipo");

                    b.Property<string>("Titulo");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CatalogPaisId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ResultadosProducao");
                });

            modelBuilder.Entity("PeD.Models.ResultadoSocioAmbiental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc");

                    b.Property<bool?>("Positivo");

                    b.Property<int>("ProjetoId");

                    b.Property<bool?>("TecnicaPrevista");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ResultadosSocioAmbiental");
                });

            modelBuilder.Entity("PeD.Models.SystemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemOptions");
                });

            modelBuilder.Entity("PeD.Models.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogTemaId");

                    b.Property<string>("OutroDesc");

                    b.Property<int>("ProjetoId");

                    b.HasKey("Id");

                    b.HasIndex("CatalogTemaId");

                    b.HasIndex("ProjetoId")
                        .IsUnique();

                    b.ToTable("Temas");
                });

            modelBuilder.Entity("PeD.Models.TemaSubTema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogSubTemaId");

                    b.Property<string>("OutroDesc");

                    b.Property<int?>("TemaId");

                    b.HasKey("Id");

                    b.HasIndex("CatalogSubTemaId");

                    b.HasIndex("TemaId");

                    b.ToTable("TemaSubTemas");
                });

            modelBuilder.Entity("PeD.Models.Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Categoria");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("NomeArquivo");

                    b.Property<int?>("ProjetoId");

                    b.Property<int?>("RegistroFinanceiroId");

                    b.Property<int?>("RelatorioFinalId");

                    b.Property<int?>("ResultadoCapacitacaoId");

                    b.Property<int?>("ResultadoProducaoId");

                    b.Property<int?>("TemaId");

                    b.Property<string>("Url");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RegistroFinanceiroId");

                    b.HasIndex("RelatorioFinalId");

                    b.HasIndex("ResultadoCapacitacaoId");

                    b.HasIndex("ResultadoProducaoId");

                    b.HasIndex("TemaId");

                    b.HasIndex("UserId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("PeD.Models.UserProjeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogUserPermissaoId");

                    b.Property<int>("ProjetoId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CatalogUserPermissaoId");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjetos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PeD.Models.AlocacaoRh", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("PeD.Models.Etapa", "Etapa")
                        .WithMany()
                        .HasForeignKey("EtapaId");

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("AlocacoesRh")
                        .HasForeignKey("ProjetoId");

                    b.HasOne("PeD.Models.RecursoHumano", "RecursoHumano")
                        .WithMany()
                        .HasForeignKey("RecursoHumanoId");
                });

            modelBuilder.Entity("PeD.Models.AlocacaoRm", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "EmpresaFinanciadora")
                        .WithMany()
                        .HasForeignKey("EmpresaFinanciadoraId");

                    b.HasOne("PeD.Models.Empresa", "EmpresaRecebedora")
                        .WithMany()
                        .HasForeignKey("EmpresaRecebedoraId");

                    b.HasOne("PeD.Models.Etapa", "Etapa")
                        .WithMany()
                        .HasForeignKey("EtapaId");

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("AlocacoesRm")
                        .HasForeignKey("ProjetoId");

                    b.HasOne("PeD.Models.RecursoMaterial", "RecursoMaterial")
                        .WithMany()
                        .HasForeignKey("RecursoMaterialId");
                });

            modelBuilder.Entity("PeD.Models.ApplicationUser", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("PeD.Models.FotoPerfil", "FotoPerfil")
                        .WithMany()
                        .HasForeignKey("FotoPerfilId");
                });

            modelBuilder.Entity("PeD.Models.AtividadesGestao", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithOne("Atividades")
                        .HasForeignKey("PeD.Models.AtividadesGestao", "ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.Atividade", b =>
                {
                    b.HasOne("PeD.Models.CategoriaContabil")
                        .WithMany("Atividades")
                        .HasForeignKey("CatalogCategoriaContabilGestaoId");
                });

            modelBuilder.Entity("PeD.Models.CatalogProdutoTipoDetalhado", b =>
                {
                    b.HasOne("PeD.Models.FaseCadeiaProduto")
                        .WithMany("TiposDetalhados")
                        .HasForeignKey("CatalogProdutoFaseCadeiaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.SubTema", b =>
                {
                    b.HasOne("PeD.Models.Tema")
                        .WithMany("SubTemas")
                        .HasForeignKey("CatalogTemaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.Demandas.Demanda", b =>
                {
                    b.HasOne("PeD.Models.ApplicationUser", "Criador")
                        .WithMany()
                        .HasForeignKey("CriadorId");

                    b.HasOne("PeD.Models.ApplicationUser", "Revisor")
                        .WithMany()
                        .HasForeignKey("RevisorId");

                    b.HasOne("PeD.Models.ApplicationUser", "SuperiorDireto")
                        .WithMany()
                        .HasForeignKey("SuperiorDiretoId");
                });

            modelBuilder.Entity("PeD.Models.Demandas.DemandaComentario", b =>
                {
                    b.HasOne("PeD.Models.Demandas.Demanda")
                        .WithMany("Comentarios")
                        .HasForeignKey("DemandaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Models.Demandas.DemandaFormFile", b =>
                {
                    b.HasOne("PeD.Models.Demandas.DemandaFormValues")
                        .WithMany("Files")
                        .HasForeignKey("DemandaFormValuesId");

                    b.HasOne("PeD.Models.FileUpload", "File")
                        .WithMany()
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("PeD.Models.Empresa", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("PeD.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("CatalogEstadoId");

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("Empresas")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.Etapa", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("Etapas")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.EtapaMes", b =>
                {
                    b.HasOne("PeD.Models.Etapa")
                        .WithMany("EtapaMeses")
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.EtapaProduto", b =>
                {
                    b.HasOne("PeD.Models.Etapa")
                        .WithMany("EtapaProdutos")
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.Produto")
                        .WithMany("EtapaProduto")
                        .HasForeignKey("ProdutoId");
                });

            modelBuilder.Entity("PeD.Models.FileUpload", b =>
                {
                    b.HasOne("PeD.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Models.LogProjeto", b =>
                {
                    b.HasOne("PeD.Models.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Models.Produto", b =>
                {
                    b.HasOne("PeD.Models.FaseCadeiaProduto", "FaseCadeiaProduto")
                        .WithMany()
                        .HasForeignKey("CatalogProdutoFaseCadeiaId");

                    b.HasOne("PeD.Models.CatalogProdutoTipoDetalhado", "CatalogProdutoTipoDetalhado")
                        .WithMany()
                        .HasForeignKey("CatalogProdutoTipoDetalhadoId");

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("Produtos")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.Projeto", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("PeD.Models.Segmento", "Segmento")
                        .WithMany()
                        .HasForeignKey("CatalogSegmentoId");

                    b.HasOne("PeD.Models.CatalogStatus", "CatalogStatus")
                        .WithMany()
                        .HasForeignKey("CatalogStatusId");
                });

            modelBuilder.Entity("PeD.Models.RecursoHumano", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("RecursosHumanos")
                        .HasForeignKey("ProjetoId");
                });

            modelBuilder.Entity("PeD.Models.RecursoMaterial", b =>
                {
                    b.HasOne("PeD.Models.Atividade", "Atividade")
                        .WithMany()
                        .HasForeignKey("CatalogAtividadeId");

                    b.HasOne("PeD.Models.CategoriaContabil", "CategoriaContabilGestao")
                        .WithMany()
                        .HasForeignKey("CatalogCategoriaContabilGestaoId");

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("RecursosMateriais")
                        .HasForeignKey("ProjetoId");
                });

            modelBuilder.Entity("PeD.Models.RegistroFinanceiro", b =>
                {
                    b.HasOne("PeD.Models.Atividade", "Atividade")
                        .WithMany()
                        .HasForeignKey("CatalogAtividadeId");

                    b.HasOne("PeD.Models.CategoriaContabil", "CategoriaContabilGestao")
                        .WithMany()
                        .HasForeignKey("CatalogCategoriaContabilGestaoId");

                    b.HasOne("PeD.Models.Empresa", "EmpresaFinanciadora")
                        .WithMany()
                        .HasForeignKey("EmpresaFinanciadoraId");

                    b.HasOne("PeD.Models.Empresa", "EmpresaRecebedora")
                        .WithMany()
                        .HasForeignKey("EmpresaRecebedoraId");

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("RegistroFinanceiro")
                        .HasForeignKey("ProjetoId");

                    b.HasOne("PeD.Models.RecursoHumano", "RecursoHumano")
                        .WithMany()
                        .HasForeignKey("RecursoHumanoId");

                    b.HasOne("PeD.Models.RecursoMaterial", "RecursoMaterial")
                        .WithMany()
                        .HasForeignKey("RecursoMaterialId");
                });

            modelBuilder.Entity("PeD.Models.RegistroObs", b =>
                {
                    b.HasOne("PeD.Models.RegistroFinanceiro")
                        .WithMany("ObsInternas")
                        .HasForeignKey("RegistroFinanceiroId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Models.RelatorioFinal", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithOne("RelatorioFinal")
                        .HasForeignKey("PeD.Models.RelatorioFinal", "ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoCapacitacao", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("ResultadosCapacitacao")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.RecursoHumano", "RecursoHumano")
                        .WithMany()
                        .HasForeignKey("RecursoHumanoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoEconomico", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("ResultadosEconomico")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoInfra", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("ResultadosInfra")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoIntelectual", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("ResultadosIntelectual")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoIntelectualDepositante", b =>
                {
                    b.HasOne("PeD.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.ResultadoIntelectual")
                        .WithMany("Depositantes")
                        .HasForeignKey("ResultadoIntelectualId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoIntelectualInventor", b =>
                {
                    b.HasOne("PeD.Models.RecursoHumano", "RecursoHumano")
                        .WithMany()
                        .HasForeignKey("RecursoHumanoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.ResultadoIntelectual")
                        .WithMany("Inventores")
                        .HasForeignKey("ResultadoIntelectualId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoProducao", b =>
                {
                    b.HasOne("PeD.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("CatalogPaisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("ResultadosProducao")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.ResultadoSocioAmbiental", b =>
                {
                    b.HasOne("PeD.Models.Projeto")
                        .WithMany("ResultadosSocioAmbiental")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.Tema", b =>
                {
                    b.HasOne("PeD.Models.Tema", "Tema")
                        .WithMany()
                        .HasForeignKey("CatalogTemaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.Projeto")
                        .WithOne("Tema")
                        .HasForeignKey("PeD.Models.Tema", "ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PeD.Models.TemaSubTema", b =>
                {
                    b.HasOne("PeD.Models.SubTema", "SubTema")
                        .WithMany()
                        .HasForeignKey("CatalogSubTemaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.Tema")
                        .WithMany("SubTemas")
                        .HasForeignKey("TemaId");
                });

            modelBuilder.Entity("PeD.Models.Upload", b =>
                {
                    b.HasOne("PeD.Models.RegistroFinanceiro")
                        .WithMany("Uploads")
                        .HasForeignKey("RegistroFinanceiroId");

                    b.HasOne("PeD.Models.RelatorioFinal")
                        .WithMany("Uploads")
                        .HasForeignKey("RelatorioFinalId");

                    b.HasOne("PeD.Models.ResultadoCapacitacao")
                        .WithMany("Uploads")
                        .HasForeignKey("ResultadoCapacitacaoId");

                    b.HasOne("PeD.Models.ResultadoProducao")
                        .WithMany("Uploads")
                        .HasForeignKey("ResultadoProducaoId");

                    b.HasOne("PeD.Models.Tema")
                        .WithMany("Uploads")
                        .HasForeignKey("TemaId");

                    b.HasOne("PeD.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Models.UserProjeto", b =>
                {
                    b.HasOne("PeD.Models.CatalogUserPermissao", "CatalogUserPermissao")
                        .WithMany()
                        .HasForeignKey("CatalogUserPermissaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.Projeto", "Projeto")
                        .WithMany("UsersProjeto")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PeD.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PeD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PeD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PeD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PeD.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
