// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeD.Data;

namespace PeD.Data.Migrations
{
    [DbContext(typeof(GestorDbContext))]
    [Migration("20210210140951_PropostasChilds")]
    partial class PropostasChilds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PeD.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.Captacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Cancelamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Consideracoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContratoSugeridoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CriadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DemandaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnvioCaptacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Termino")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioSuprimentoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoSugeridoId");

                    b.HasIndex("CriadorId");

                    b.HasIndex("DemandaId");

                    b.HasIndex("UsuarioSuprimentoId");

                    b.ToTable("Captacoes");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoArquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcessoFornecedor")
                        .HasColumnType("bit");

                    b.Property<int>("CaptacaoId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CaptacaoId");

                    b.HasIndex("UserId");

                    b.ToTable("CaptacaoArquivos");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoContrato", b =>
                {
                    b.Property<int>("CaptacaoId")
                        .HasColumnType("int");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.HasKey("CaptacaoId", "ContratoId");

                    b.HasIndex("ContratoId");

                    b.ToTable("CaptacaoContratos");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoFornecedor", b =>
                {
                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int>("CaptacaoId")
                        .HasColumnType("int");

                    b.HasKey("FornecedorId", "CaptacaoId");

                    b.HasIndex("CaptacaoId");

                    b.ToTable("CaptacoesFornecedores");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoSugestaoFornecedor", b =>
                {
                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int>("CaptacaoId")
                        .HasColumnType("int");

                    b.HasKey("FornecedorId", "CaptacaoId");

                    b.HasIndex("CaptacaoId");

                    b.ToTable("CaptacaoSugestoesFornecedores");
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.CategoriaContabil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriasContabeis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Recursos Humanos",
                            Valor = "RH"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Serviços de Terceiros",
                            Valor = "ST"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Materiais de Consumo",
                            Valor = "MC"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Viagens e Diárias",
                            Valor = "VD"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Outros",
                            Valor = "OU"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "CITENEL",
                            Valor = "CT"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Auditoria Contábil e Financeira",
                            Valor = "AC"
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.CategoriaContabilAtividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaContabilId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaContabilId");

                    b.ToTable("CategoriaContabilAtividades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaContabilId = 1,
                            Nome = "Dedicação horária dos membros da equipe de gestão do Programa de P&D da Empresa, quadro efetivo.",
                            Valor = "HH"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaContabilId = 2,
                            Nome = "Desenvolvimento de ferramenta para gestão do Programa de P&D da Empresa, excluindose aquisição de equipamentos.",
                            Valor = "FG"
                        },
                        new
                        {
                            Id = 3,
                            CategoriaContabilId = 2,
                            Nome = "Prospecção tecnológica e demais atividades necessárias ao planejamento e à elaboração do plano estratégico de investimento em P&D.",
                            Valor = "PP"
                        },
                        new
                        {
                            Id = 4,
                            CategoriaContabilId = 3,
                            Nome = "Divulgação de resultados de projetos de P&D, concluídos e/ou em execução.",
                            Valor = "RP"
                        },
                        new
                        {
                            Id = 5,
                            CategoriaContabilId = 4,
                            Nome = "Participação dos membros da equipe de gestão em eventos sobre pesquisa, desenvolvimento e inovação relacionados ao setor elétrico e/ou em cursos de gestão tecnológica e da informação.",
                            Valor = "EC"
                        },
                        new
                        {
                            Id = 6,
                            CategoriaContabilId = 4,
                            Nome = "Prospecção tecnológica e demais atividades necessárias ao planejamento e à elaboração do plano estratégico de investimento em P&D.",
                            Valor = "PP"
                        },
                        new
                        {
                            Id = 7,
                            CategoriaContabilId = 4,
                            Nome = "Divulgação de resultados de projetos de P&D, concluídos e/ou em execução.",
                            Valor = "RP"
                        },
                        new
                        {
                            Id = 8,
                            CategoriaContabilId = 4,
                            Nome = "Participação dos responsáveis técnicos pelos projetos de P&D nas avaliações presenciais convocadas pela ANEEL.",
                            Valor = "AP"
                        },
                        new
                        {
                            Id = 9,
                            CategoriaContabilId = 5,
                            Nome = "Participação dos membros da equipe de gestão em eventos sobre pesquisa, desenvolvimento e inovação relacionados ao setor elétrico e/ou em cursos de gestão tecnológica e da informação.",
                            Valor = "EC"
                        },
                        new
                        {
                            Id = 10,
                            CategoriaContabilId = 5,
                            Nome = "Divulgação de resultados de projetos de P&D, concluídos e/ou em execução.",
                            Valor = "RP"
                        },
                        new
                        {
                            Id = 11,
                            CategoriaContabilId = 5,
                            Nome = "Buscas de anterioridade no Instituto Nacional da Propriedade Industrial (INPI).",
                            Valor = "BA"
                        },
                        new
                        {
                            Id = 12,
                            CategoriaContabilId = 6,
                            Nome = "Apoio à realização do CITENEL.",
                            Valor = "AC"
                        },
                        new
                        {
                            Id = 13,
                            CategoriaContabilId = 7,
                            Nome = "Contratação de auditoria contábil e financeira para os projetos concluídos.",
                            Valor = "CA"
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.FaseCadeiaProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FasesCadeiaProduto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Pesquisa Básica Dirigida",
                            Valor = "PB"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Pesquisa Aplicada",
                            Valor = "PA"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Desenvolvimento Experimental",
                            Valor = "DE"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Cabeça de série",
                            Valor = "CS"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Lote Pioneiro",
                            Valor = "LP"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Inserção no Mercado",
                            Valor = "IM"
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.FaseTipoDetalhado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FaseCadeiaProdutoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FaseCadeiaProdutoId");

                    b.ToTable("FaseTipoDetalhado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FaseCadeiaProdutoId = 1,
                            Nome = "Novo material",
                            Valor = ""
                        },
                        new
                        {
                            Id = 2,
                            FaseCadeiaProdutoId = 1,
                            Nome = "Nova estrutura",
                            Valor = ""
                        },
                        new
                        {
                            Id = 3,
                            FaseCadeiaProdutoId = 1,
                            Nome = "Modelo",
                            Valor = ""
                        },
                        new
                        {
                            Id = 4,
                            FaseCadeiaProdutoId = 1,
                            Nome = "Algoritmo",
                            Valor = ""
                        },
                        new
                        {
                            Id = 5,
                            FaseCadeiaProdutoId = 2,
                            Nome = "metodologia ou técnica",
                            Valor = ""
                        },
                        new
                        {
                            Id = 6,
                            FaseCadeiaProdutoId = 2,
                            Nome = "Projeto demonstrativo de novos equipamentos",
                            Valor = ""
                        },
                        new
                        {
                            Id = 7,
                            FaseCadeiaProdutoId = 2,
                            Nome = "Modelos digitais",
                            Valor = ""
                        },
                        new
                        {
                            Id = 8,
                            FaseCadeiaProdutoId = 2,
                            Nome = "Modelos de funções ou de processos",
                            Valor = ""
                        },
                        new
                        {
                            Id = 9,
                            FaseCadeiaProdutoId = 3,
                            Nome = "Protótipo de material para demonstração e testes",
                            Valor = ""
                        },
                        new
                        {
                            Id = 10,
                            FaseCadeiaProdutoId = 3,
                            Nome = "Protótipo de dispositivo para demonstração e testes",
                            Valor = ""
                        },
                        new
                        {
                            Id = 11,
                            FaseCadeiaProdutoId = 3,
                            Nome = "Protótipo de equipamento para demonstração e testes",
                            Valor = ""
                        },
                        new
                        {
                            Id = 12,
                            FaseCadeiaProdutoId = 3,
                            Nome = "Implantação de projeto piloto",
                            Valor = ""
                        },
                        new
                        {
                            Id = 13,
                            FaseCadeiaProdutoId = 3,
                            Nome = "Serviços (novos ou aperfeiçoados)",
                            Valor = ""
                        },
                        new
                        {
                            Id = 14,
                            FaseCadeiaProdutoId = 3,
                            Nome = "Software baseado em pesquisa aplicada",
                            Valor = ""
                        },
                        new
                        {
                            Id = 15,
                            FaseCadeiaProdutoId = 4,
                            Nome = "Aperfeiçoamento de protótipo obtido em projeto anterior",
                            Valor = ""
                        },
                        new
                        {
                            Id = 16,
                            FaseCadeiaProdutoId = 5,
                            Nome = "Primeira fabricação de produto",
                            Valor = ""
                        },
                        new
                        {
                            Id = 17,
                            FaseCadeiaProdutoId = 5,
                            Nome = "Reprodução de licenças para ensaios de validação",
                            Valor = ""
                        },
                        new
                        {
                            Id = 18,
                            FaseCadeiaProdutoId = 5,
                            Nome = "Análise de custos e refino do projeto, com vistas à produção industrial e/ou à comercialização",
                            Valor = ""
                        },
                        new
                        {
                            Id = 19,
                            FaseCadeiaProdutoId = 6,
                            Nome = "Estudos mercadológicos",
                            Valor = ""
                        },
                        new
                        {
                            Id = 20,
                            FaseCadeiaProdutoId = 6,
                            Nome = "Material de divulgação",
                            Valor = ""
                        },
                        new
                        {
                            Id = 21,
                            FaseCadeiaProdutoId = 6,
                            Nome = "Registro de patentes",
                            Valor = ""
                        },
                        new
                        {
                            Id = 22,
                            FaseCadeiaProdutoId = 6,
                            Nome = "Contratação de empresa de transferência de tecnologia e serviços jurídicos",
                            Valor = ""
                        },
                        new
                        {
                            Id = 23,
                            FaseCadeiaProdutoId = 6,
                            Nome = "Aprimoramentos e melhorias incrementais nos produtos",
                            Valor = ""
                        },
                        new
                        {
                            Id = 24,
                            FaseCadeiaProdutoId = 6,
                            Nome = "Software ou serviços",
                            Valor = ""
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.Segmento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Segmentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Geração",
                            Valor = "G"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Transmissão",
                            Valor = "T"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Distribuição",
                            Valor = "D"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Comercialização",
                            Valor = "C"
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Temas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Fontes alternativas de geração de energia elétrica",
                            Order = 0,
                            Valor = "FA"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Alternativas energéticas sustentáveis de atendimento a pequenos sistemas isolados.",
                            Order = 0,
                            ParentId = 1,
                            Valor = "FA01"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Geração de energia a partir de resíduos sólidos urbanos.",
                            Order = 0,
                            ParentId = 1,
                            Valor = "FA02"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Novos materiais e equipamentos para geração de energia por fontes alternativas.",
                            Order = 0,
                            ParentId = 1,
                            Valor = "FA03"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Tecnologias para aproveitamento de novos combustíveis em plantas geradoras.",
                            Order = 0,
                            ParentId = 1,
                            Valor = "FA04"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 1,
                            Valor = "FA0X"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Geração Termelétrica",
                            Order = 0,
                            Valor = "GT"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Avaliação de riscos e incertezas do fornecimento contínuo de gás natural para geração termelétrica.",
                            Order = 0,
                            ParentId = 7,
                            Valor = "GT01"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Novas técnicas para eficientização e diminuição da emissão de poluentes de usinas termelétricas a combustível derivado de petróleo.",
                            Order = 0,
                            ParentId = 7,
                            Valor = "GT02"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Otimização da geração de energia elétrica em plantas industriais: aumento de eficiência na cogeração.",
                            Order = 0,
                            ParentId = 7,
                            Valor = "GT03"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "Micro-sistemas de cogeração residenciais.",
                            Order = 0,
                            ParentId = 7,
                            Valor = "GT04"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Técnicas para captura e seqüestro de carbono de termelétricas.",
                            Order = 0,
                            ParentId = 7,
                            Valor = "GT05"
                        },
                        new
                        {
                            Id = 13,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 7,
                            Valor = "GT0X"
                        },
                        new
                        {
                            Id = 14,
                            Nome = "Gestão de Bacias e Reservatórios",
                            Order = 0,
                            Valor = "GB"
                        },
                        new
                        {
                            Id = 15,
                            Nome = "Emissões de gases de efeito estufa (GEE) em reservatórios de usinas hidrelétricas.",
                            Order = 0,
                            ParentId = 14,
                            Valor = "GB01"
                        },
                        new
                        {
                            Id = 16,
                            Nome = "Efeitos de mudanças climáticas globais no regime hidrológico de bacias hidrográficas.",
                            Order = 0,
                            ParentId = 14,
                            Valor = "GB02"
                        },
                        new
                        {
                            Id = 17,
                            Nome = "Integração e otimização do uso múltiplo de reservatórios hidrelétricos.",
                            Order = 0,
                            ParentId = 14,
                            Valor = "GB03"
                        },
                        new
                        {
                            Id = 18,
                            Nome = "Gestão sócio-patrimonial de reservatórios de usinas hidrelétricas.",
                            Order = 0,
                            ParentId = 14,
                            Valor = "GB04"
                        },
                        new
                        {
                            Id = 19,
                            Nome = "Gestão da segurança de barragens de usinas hidrelétricas.",
                            Order = 0,
                            ParentId = 14,
                            Valor = "GB05"
                        },
                        new
                        {
                            Id = 20,
                            Nome = "Assoreamento de reservatórios formados por barragens de usinas hidrelétricas.",
                            Order = 0,
                            ParentId = 14,
                            Valor = "GB06"
                        },
                        new
                        {
                            Id = 21,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 14,
                            Valor = "GB0X"
                        },
                        new
                        {
                            Id = 22,
                            Nome = "Meio Ambiente",
                            Order = 0,
                            Valor = "MA"
                        },
                        new
                        {
                            Id = 23,
                            Nome = "Impactos e restrições socioambientais de sistemas de energia elétrica.",
                            Order = 0,
                            ParentId = 22,
                            Valor = "MA01"
                        },
                        new
                        {
                            Id = 24,
                            Nome = "Metodologias para mensuração econômico-financeira de externalidades em sistemas de energia elétrica.",
                            Order = 0,
                            ParentId = 22,
                            Valor = "MA02"
                        },
                        new
                        {
                            Id = 25,
                            Nome = "Estudos de toxicidade relacionados à deterioração da qualidade da água em reservatórios. ",
                            Order = 0,
                            ParentId = 22,
                            Valor = "MA03"
                        },
                        new
                        {
                            Id = 26,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 22,
                            Valor = "MA0X"
                        },
                        new
                        {
                            Id = 27,
                            Nome = "Segurança",
                            Order = 0,
                            Valor = "SE"
                        },
                        new
                        {
                            Id = 28,
                            Nome = "Identificação e mitigação dos impactos de campos eletromagnéticos em organismos vivos.",
                            Order = 0,
                            ParentId = 27,
                            Valor = "SE01"
                        },
                        new
                        {
                            Id = 29,
                            Nome = "Análise e mitigação de riscos de acidentes elétricos.",
                            Order = 0,
                            ParentId = 27,
                            Valor = "SE02"
                        },
                        new
                        {
                            Id = 30,
                            Nome = "Novas tecnologias para equipamentos de proteção individual.",
                            Order = 0,
                            ParentId = 27,
                            Valor = "SE03"
                        },
                        new
                        {
                            Id = 31,
                            Nome = "Novas tecnologias para inspeção e manutenção de sistemas elétricos.",
                            Order = 0,
                            ParentId = 27,
                            Valor = "SE04"
                        },
                        new
                        {
                            Id = 32,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 27,
                            Valor = "SE0X"
                        },
                        new
                        {
                            Id = 33,
                            Nome = "Eficiência Energética",
                            Order = 0,
                            Valor = "EE"
                        },
                        new
                        {
                            Id = 34,
                            Nome = "Novas tecnologias para melhoria da eficiência energética.",
                            Order = 0,
                            ParentId = 33,
                            Valor = "EE01"
                        },
                        new
                        {
                            Id = 35,
                            Nome = "Gerenciamento de carga pelo lado da demanda.",
                            Order = 0,
                            ParentId = 33,
                            Valor = "EE02"
                        },
                        new
                        {
                            Id = 36,
                            Nome = "Definição de indicadores de eficiência energética.",
                            Order = 0,
                            ParentId = 33,
                            Valor = "EE03"
                        },
                        new
                        {
                            Id = 37,
                            Nome = "Metodologias para avaliação de resultados de projetos de eficiência energética.",
                            Order = 0,
                            ParentId = 33,
                            Valor = "EE04"
                        },
                        new
                        {
                            Id = 38,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 33,
                            Valor = "EE0X"
                        },
                        new
                        {
                            Id = 39,
                            Nome = "Planejamento de Sistemas de Energia Elétrica",
                            Order = 0,
                            Valor = "PL"
                        },
                        new
                        {
                            Id = 40,
                            Nome = "Planejamento integrado da expansão de sistemas elétricos.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL01"
                        },
                        new
                        {
                            Id = 41,
                            Nome = "Integração de centrais eólicas ao SIN.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL02"
                        },
                        new
                        {
                            Id = 42,
                            Nome = "Integração de geração distribuída a redes elétricas.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL03"
                        },
                        new
                        {
                            Id = 43,
                            Nome = "Metodologia de previsão de mercado para diferentes níveis temporais e estratégias de contratação.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL04"
                        },
                        new
                        {
                            Id = 44,
                            Nome = "Modelos hidrodinâmicos aplicados em reservatórios de usinas hidrelétricas.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL05"
                        },
                        new
                        {
                            Id = 45,
                            Nome = "Materiais supercondutores para transmissão de energia elétrica.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL06"
                        },
                        new
                        {
                            Id = 46,
                            Nome = "Tecnologias e sistemas de transmissão de energia em longas distâncias.",
                            Order = 0,
                            ParentId = 39,
                            Valor = "PL07"
                        },
                        new
                        {
                            Id = 47,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 39,
                            Valor = "PL0X"
                        },
                        new
                        {
                            Id = 48,
                            Nome = "Operação de Sistemas de Energia Elétrica",
                            Order = 0,
                            Valor = "OP"
                        },
                        new
                        {
                            Id = 49,
                            Nome = "Ferramentas de apoio à operação de sistemas elétricos de potência em tempo real.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP01"
                        },
                        new
                        {
                            Id = 50,
                            Nome = "Critérios de gerenciamento de carga para diferentes níveis de hierarquia.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP02"
                        },
                        new
                        {
                            Id = 51,
                            Nome = "Estruturas, funções e regras de operação dos mercados de serviços ancilares.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP03"
                        },
                        new
                        {
                            Id = 52,
                            Nome = "Otimização estrutural e paramétrica da capacidade dos sistemas de distribuição.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP04"
                        },
                        new
                        {
                            Id = 53,
                            Nome = "Alocação de fontes de potência reativa em sistemas de distribuição.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP05"
                        },
                        new
                        {
                            Id = 54,
                            Nome = "Estudo, simulação e análise do desempenho de sistemas elétricos de potência.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP06"
                        },
                        new
                        {
                            Id = 55,
                            Nome = "Análise das grandes perturbações e impactos no planejamento, operação e controle.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP07"
                        },
                        new
                        {
                            Id = 56,
                            Nome = "Desenvolvimento de modelos para a otimização de despacho hidrotérmico.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP08"
                        },
                        new
                        {
                            Id = 57,
                            Nome = "Desenvolvimento e/ou aprimoramento dos modelos de previsão de chuva versus vazão.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP09"
                        },
                        new
                        {
                            Id = 58,
                            Nome = "Sistemas de monitoramento da operação de usinas não-despachadas pelo ONS.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP10"
                        },
                        new
                        {
                            Id = 59,
                            Nome = "Outros.",
                            Order = 0,
                            ParentId = 48,
                            Valor = "OP0X"
                        },
                        new
                        {
                            Id = 60,
                            Nome = "Supervisão, Controle e Proteção de Sistemas de Energia Elétrica",
                            Order = 0,
                            Valor = "SC"
                        },
                        new
                        {
                            Id = 61,
                            Nome = "Implementação de sistemas de controle (robusto, adaptativo e inteligente).",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC01"
                        },
                        new
                        {
                            Id = 62,
                            Nome = "Análise dinâmica de sistemas em tempo real.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC02"
                        },
                        new
                        {
                            Id = 63,
                            Nome = "Técnicas eficientes de restauração rápida de grandes centros de carga.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC03"
                        },
                        new
                        {
                            Id = 64,
                            Nome = "Desenvolvimento de técnicas para recomposição de sistemas elétricos.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC04"
                        },
                        new
                        {
                            Id = 65,
                            Nome = "Técnicas de inteligência artificial aplicadas ao controle, operação e proteção de sistemas elétricos.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC05"
                        },
                        new
                        {
                            Id = 66,
                            Nome = "Novas tecnologias para supervisão do fornecimento de energia elétrica.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC06"
                        },
                        new
                        {
                            Id = 67,
                            Nome = "Desenvolvimento e aplicação de sistemas de medição fasorial.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC07"
                        },
                        new
                        {
                            Id = 68,
                            Nome = "Análise de falhas em sistemas elétricos.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC08"
                        },
                        new
                        {
                            Id = 69,
                            Nome = "Compatibilidade eletromagnética em sistemas elétricos.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC09"
                        },
                        new
                        {
                            Id = 70,
                            Nome = "Sistemas de aterramento.",
                            Order = 0,
                            ParentId = 60,
                            Valor = "SC10"
                        },
                        new
                        {
                            Id = 71,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 60,
                            Valor = "SC0X"
                        },
                        new
                        {
                            Id = 72,
                            Nome = "Qualidade e Confiabilidade dos Serviços de Energia Elétrica",
                            Order = 0,
                            Valor = "QC"
                        },
                        new
                        {
                            Id = 73,
                            Nome = "Sistemas e técnicas de monitoração e gerenciamento da qualidade da energia elétrica.",
                            Order = 0,
                            ParentId = 72,
                            Valor = "QC01"
                        },
                        new
                        {
                            Id = 74,
                            Nome = "Modelagem e análise dos distúrbios associados à qualidade da energia elétrica.",
                            Order = 0,
                            ParentId = 72,
                            Valor = "QC02"
                        },
                        new
                        {
                            Id = 75,
                            Nome = "Requisitos para conexão de cargas potencialmente perturbadoras no sistema elétrico.",
                            Order = 0,
                            ParentId = 72,
                            Valor = "QC03"
                        },
                        new
                        {
                            Id = 76,
                            Nome = "Curvas de sensibilidade e de suportabilidade de equipamentos.",
                            Order = 0,
                            ParentId = 72,
                            Valor = "QC04"
                        },
                        new
                        {
                            Id = 77,
                            Nome = "Impactos econômicos e aspectos contratuais da qualidade da energia elétrica.",
                            Order = 0,
                            ParentId = 72,
                            Valor = "QC05"
                        },
                        new
                        {
                            Id = 78,
                            Nome = "Compensação financeira por violação de indicadores de qualidade.",
                            Order = 0,
                            ParentId = 72,
                            Valor = "QC06"
                        },
                        new
                        {
                            Id = 79,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 72,
                            Valor = "QC0X"
                        },
                        new
                        {
                            Id = 80,
                            Nome = "Medição, faturamento e combate a perdas comerciais",
                            Order = 0,
                            Valor = "MF"
                        },
                        new
                        {
                            Id = 81,
                            Nome = "Avaliação econômica para definição da perda mínima atingível.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF01"
                        },
                        new
                        {
                            Id = 82,
                            Nome = "Estimação, análise e redução de perdas técnicas em sistemas elétricos.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF02"
                        },
                        new
                        {
                            Id = 83,
                            Nome = "Desenvolvimento de tecnologias para combate à fraude e ao furto de energia elétrica.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF03"
                        },
                        new
                        {
                            Id = 84,
                            Nome = "Diagnóstico, prospecção e redução da vulnerabilidade de sistemas elétricos ao furto e à fraude.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF04"
                        },
                        new
                        {
                            Id = 85,
                            Nome = "Energia economizada e agregada ao mercado após regularização de fraudes.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF05"
                        },
                        new
                        {
                            Id = 86,
                            Nome = "Uso de indicadores socioeconômicos, dados fiscais e gastos com outros insumos.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF06"
                        },
                        new
                        {
                            Id = 87,
                            Nome = "Gerenciamento dos equipamentos de medição (qualidade e redução de falhas).",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF07"
                        },
                        new
                        {
                            Id = 88,
                            Nome = "Impacto dos projetos de eficiência energética na redução de perdas comerciais.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF08"
                        },
                        new
                        {
                            Id = 89,
                            Nome = "Sistemas centralizados de medição, controle e gerenciamento de energia em consumidores finais.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF09"
                        },
                        new
                        {
                            Id = 90,
                            Nome = "Sistemas de tarifação e novas estruturas tarifárias.",
                            Order = 0,
                            ParentId = 80,
                            Valor = "MF10"
                        },
                        new
                        {
                            Id = 91,
                            Nome = "Outro.",
                            Order = 1,
                            ParentId = 80,
                            Valor = "MF0X"
                        },
                        new
                        {
                            Id = 92,
                            Nome = "Outros",
                            Order = 1,
                            Valor = "OU"
                        },
                        new
                        {
                            Id = 93,
                            Nome = "Outros",
                            Order = 0,
                            ParentId = 92,
                            Valor = "OU  "
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Clausula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conteudo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clausulas");
                });

            modelBuilder.Entity("PeD.Core.Models.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conteudo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.Demanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CaptacaoDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CriadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EtapaAtual")
                        .HasColumnType("int");

                    b.Property<string>("RevisorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuperiorDiretoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CriadorId");

                    b.HasIndex("RevisorId");

                    b.HasIndex("SuperiorDiretoId");

                    b.ToTable("Demandas");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaComentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DemandaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DemandaId");

                    b.HasIndex("UserId");

                    b.ToTable("DemandaComentarios");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFormFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DemandaFormId")
                        .HasColumnType("int");

                    b.Property<int?>("DemandaFormValuesId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandaFormValuesId");

                    b.HasIndex("FileId");

                    b.ToTable("DemandaFormFiles");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFormHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormValuesId")
                        .HasColumnType("int");

                    b.Property<int>("Revisao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormValuesId");

                    b.ToTable("DemandaFormHistoricos");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFormValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("DemandaId")
                        .HasColumnType("int");

                    b.Property<string>("FormKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Revisao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DemandaFormValues");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Acao")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemandaId")
                        .HasColumnType("int");

                    b.Property<string>("StatusAnterior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNovo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DemandaId");

                    b.HasIndex("UserId");

                    b.ToTable("DemandaLogs");
                });

            modelBuilder.Entity("PeD.Core.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empresas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Empresa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "TAESA",
                            Valor = "07130"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "ATE",
                            Valor = "04906"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "ATE II",
                            Valor = "05012"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.002.685/0001-54",
                            Nome = "ATE III",
                            Valor = "05455"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "ETEO",
                            Valor = "	0414"
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "GTESA",
                            Valor = "03624"
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "19.486.977/0001-99",
                            Nome = "MARIANA",
                            Valor = "08837"
                        },
                        new
                        {
                            Id = 8,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "MUNIRAH",
                            Valor = "04757"
                        },
                        new
                        {
                            Id = 9,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "NOVATRANS",
                            Valor = "02609"
                        },
                        new
                        {
                            Id = 10,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "NTE",
                            Valor = "03619"
                        },
                        new
                        {
                            Id = 11,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "PATESA",
                            Valor = "03943"
                        },
                        new
                        {
                            Id = 12,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "15.867.360/0001-62",
                            Nome = "São Gotardo",
                            Valor = "08193"
                        },
                        new
                        {
                            Id = 13,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "STE",
                            Valor = "03944"
                        },
                        new
                        {
                            Id = 14,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "07.859.971/0001-30",
                            Nome = "TSN",
                            Valor = "02607"
                        },
                        new
                        {
                            Id = 15,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "05.063.249/0001-60",
                            Nome = "ETAU",
                            Valor = "03942"
                        },
                        new
                        {
                            Id = 16,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "09.274.998/0001-97",
                            Nome = "BRASNORTE",
                            Valor = "06625"
                        },
                        new
                        {
                            Id = 17,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "24.944.194/0001-41",
                            Nome = "MIRACEMA",
                            Valor = "10731"
                        },
                        new
                        {
                            Id = 18,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "26.617.923/0001-80",
                            Nome = "JANAÚBA",
                            Valor = "11114"
                        },
                        new
                        {
                            Id = 19,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "26.707.830/0001-47",
                            Nome = "AIMORÉS",
                            Valor = "11105"
                        },
                        new
                        {
                            Id = 20,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "26.712.591/0001-13",
                            Nome = "PARAGUAÇÚ",
                            Valor = "11104"
                        },
                        new
                        {
                            Id = 21,
                            Ativo = true,
                            Categoria = 1,
                            Cnpj = "28.052.123/0001-95",
                            Nome = "ERB 1",
                            Valor = "00000"
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "ACRE",
                            Valor = "AC"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "ALAGOAS",
                            Valor = "AL"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "AMAPÁ",
                            Valor = "AP"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "AMAZONAS",
                            Valor = "AM"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "BAHIA",
                            Valor = "BA"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "CEARÁ",
                            Valor = "CE"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "DISTRITO FEDERAL",
                            Valor = "DF"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "ESPÍRITO SANTO",
                            Valor = "ES"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "GOIÁS",
                            Valor = "GO"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "MARANHÃO",
                            Valor = "MA"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "MATO GROSSO",
                            Valor = "MT"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "MATO GROSSO DO SUL",
                            Valor = "MS"
                        },
                        new
                        {
                            Id = 13,
                            Nome = "MINAS GERAIS",
                            Valor = "MG"
                        },
                        new
                        {
                            Id = 14,
                            Nome = "PARÁ",
                            Valor = "PA"
                        },
                        new
                        {
                            Id = 15,
                            Nome = "PARAÍBA",
                            Valor = "PB"
                        },
                        new
                        {
                            Id = 16,
                            Nome = "PARANÁ",
                            Valor = "PR"
                        },
                        new
                        {
                            Id = 17,
                            Nome = "PERNAMBUCO",
                            Valor = "PE"
                        },
                        new
                        {
                            Id = 18,
                            Nome = "PIAUÍ",
                            Valor = "PI"
                        },
                        new
                        {
                            Id = 19,
                            Nome = "RIO DE JANEIRO",
                            Valor = "RJ"
                        },
                        new
                        {
                            Id = 20,
                            Nome = "RIO GRANDE DO NORTE",
                            Valor = "RN"
                        },
                        new
                        {
                            Id = 21,
                            Nome = "RIO GRANDE DO SUL",
                            Valor = "RS"
                        },
                        new
                        {
                            Id = 22,
                            Nome = "RONDONIA",
                            Valor = "RO"
                        },
                        new
                        {
                            Id = 23,
                            Nome = "RORAIMA",
                            Valor = "RR"
                        },
                        new
                        {
                            Id = 24,
                            Nome = "SANTA CATARINA",
                            Valor = "SC"
                        },
                        new
                        {
                            Id = 25,
                            Nome = "SÃO PAULO",
                            Valor = "SP"
                        },
                        new
                        {
                            Id = 26,
                            Nome = "SERGIPE",
                            Valor = "SE"
                        },
                        new
                        {
                            Id = 27,
                            Nome = "TOCANTINS",
                            Valor = "TO"
                        });
                });

            modelBuilder.Entity("PeD.Core.Models.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FileUpload");
                });

            modelBuilder.Entity("PeD.Core.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.CoExecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaCoExecutores");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Escopo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeneficioIndustria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficioInstitucional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficioSetorEletrico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficioSociedade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficioTaesa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrapartidas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienciaPrevia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objetivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaEscopos");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Etapa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescricaoAtividades")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaEtapas");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.EtapaProdutos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EtapaId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EtapaId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaEtapasProdutos");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.PlanoTrabalho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aplicabilidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuscaAnterioridade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodologiaTrabalho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Motivacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Originalidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PesquisasCorrelatas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<string>("RazoabilidadeCustos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relevancia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaPlanosTrabalhos");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Classificacao")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaseCadeia")
                        .HasColumnType("int");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("TipoDetalhado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaProdutos");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Proposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaptacaoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataClausulasAceitas")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataResposta")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("bit");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int>("Participacao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("CaptacaoId", "FornecedorId")
                        .IsUnique();

                    b.ToTable("Propostas");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoHumano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoExecutorId")
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Funcao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionalidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlCurriculo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValorHora")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CoExecutorId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaRecursosHumanos");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoHumano+Alocacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpresaFinanciadoraId")
                        .HasColumnType("int");

                    b.Property<int>("EtapaId")
                        .HasColumnType("int");

                    b.Property<string>("Justificativa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<int>("RecursoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaFinanciadoraId");

                    b.HasIndex("EtapaId");

                    b.HasIndex("PropostaId");

                    b.HasIndex("RecursoId");

                    b.ToTable("PropostaRecursosHumanosAlocacao");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaContabilId")
                        .HasColumnType("int");

                    b.Property<string>("EspecificacaoTecnica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaContabilId");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaRecursosMateriais");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoMaterial+Alocacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmpresaFinanciadoraId")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaRecebedoraId")
                        .HasColumnType("int");

                    b.Property<int>("EtapaId")
                        .HasColumnType("int");

                    b.Property<string>("Justificativa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RecursoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaFinanciadoraId");

                    b.HasIndex("EmpresaRecebedoraId");

                    b.HasIndex("EtapaId");

                    b.HasIndex("PropostaId");

                    b.HasIndex("RecursoId");

                    b.ToTable("PropostaRecursosMateriaisAlocacao");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Risco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Classificacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justificativa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Probabilidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropostaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropostaId");

                    b.ToTable("PropostaRiscos");
                });

            modelBuilder.Entity("PeD.Core.Models.SystemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemOptions");
                });

            modelBuilder.Entity("PeD.Core.Models.Fornecedores.Fornecedor", b =>
                {
                    b.HasBaseType("PeD.Core.Models.Empresa");

                    b.Property<string>("ResponsavelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ResponsavelId");

                    b.HasDiscriminator().HasValue("Fornecedor");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFile", b =>
                {
                    b.HasBaseType("PeD.Core.Models.FileUpload");

                    b.Property<int>("DemandaId")
                        .HasColumnType("int");

                    b.HasIndex("DemandaId");

                    b.HasDiscriminator().HasValue("DemandaFile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PeD.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PeD.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PeD.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("PeD.Core.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.Captacao", b =>
                {
                    b.HasOne("PeD.Core.Models.Contrato", "ContratoSugerido")
                        .WithMany()
                        .HasForeignKey("ContratoSugeridoId");

                    b.HasOne("PeD.Core.Models.ApplicationUser", "Criador")
                        .WithMany()
                        .HasForeignKey("CriadorId");

                    b.HasOne("PeD.Core.Models.Demandas.Demanda", "Demanda")
                        .WithMany()
                        .HasForeignKey("DemandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.ApplicationUser", "UsuarioSuprimento")
                        .WithMany()
                        .HasForeignKey("UsuarioSuprimentoId");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoArquivo", b =>
                {
                    b.HasOne("PeD.Core.Models.Captacoes.Captacao", "Captacao")
                        .WithMany("Arquivos")
                        .HasForeignKey("CaptacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoContrato", b =>
                {
                    b.HasOne("PeD.Core.Models.Captacoes.Captacao", "Captacao")
                        .WithMany("Contratos")
                        .HasForeignKey("CaptacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoFornecedor", b =>
                {
                    b.HasOne("PeD.Core.Models.Captacoes.Captacao", "Captacao")
                        .WithMany("FornecedoresConvidados")
                        .HasForeignKey("CaptacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Captacoes.CaptacaoSugestaoFornecedor", b =>
                {
                    b.HasOne("PeD.Core.Models.Captacoes.Captacao", "Captacao")
                        .WithMany("FornecedoresSugeridos")
                        .HasForeignKey("CaptacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.CategoriaContabilAtividade", b =>
                {
                    b.HasOne("PeD.Core.Models.Catalogos.CategoriaContabil", null)
                        .WithMany("Atividades")
                        .HasForeignKey("CategoriaContabilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.FaseTipoDetalhado", b =>
                {
                    b.HasOne("PeD.Core.Models.Catalogos.FaseCadeiaProduto", null)
                        .WithMany("TiposDetalhados")
                        .HasForeignKey("FaseCadeiaProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Catalogos.Tema", b =>
                {
                    b.HasOne("PeD.Core.Models.Catalogos.Tema", "Parent")
                        .WithMany("SubTemas")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.Demanda", b =>
                {
                    b.HasOne("PeD.Core.Models.ApplicationUser", "Criador")
                        .WithMany()
                        .HasForeignKey("CriadorId");

                    b.HasOne("PeD.Core.Models.ApplicationUser", "Revisor")
                        .WithMany()
                        .HasForeignKey("RevisorId");

                    b.HasOne("PeD.Core.Models.ApplicationUser", "SuperiorDireto")
                        .WithMany()
                        .HasForeignKey("SuperiorDiretoId");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaComentario", b =>
                {
                    b.HasOne("PeD.Core.Models.Demandas.Demanda", null)
                        .WithMany("Comentarios")
                        .HasForeignKey("DemandaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFormFile", b =>
                {
                    b.HasOne("PeD.Core.Models.Demandas.DemandaFormValues", null)
                        .WithMany("Files")
                        .HasForeignKey("DemandaFormValuesId");

                    b.HasOne("PeD.Core.Models.Demandas.DemandaFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFormHistorico", b =>
                {
                    b.HasOne("PeD.Core.Models.Demandas.DemandaFormValues", "FormValues")
                        .WithMany("Historico")
                        .HasForeignKey("FormValuesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaLog", b =>
                {
                    b.HasOne("PeD.Core.Models.Demandas.Demanda", "Demanda")
                        .WithMany()
                        .HasForeignKey("DemandaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Core.Models.FileUpload", b =>
                {
                    b.HasOne("PeD.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.CoExecutor", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Escopo", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Etapa", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.EtapaProdutos", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Etapa", "Etapa")
                        .WithMany()
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.PlanoTrabalho", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Produto", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Proposta", b =>
                {
                    b.HasOne("PeD.Core.Models.Captacoes.Captacao", "Captacao")
                        .WithMany("Propostas")
                        .HasForeignKey("CaptacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoHumano", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.CoExecutor", "CoExecutor")
                        .WithMany()
                        .HasForeignKey("CoExecutorId");

                    b.HasOne("PeD.Core.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoHumano+Alocacao", b =>
                {
                    b.HasOne("PeD.Core.Models.Empresa", "EmpresaFinanciadora")
                        .WithMany()
                        .HasForeignKey("EmpresaFinanciadoraId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Etapa", "Etapa")
                        .WithMany()
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.RecursoHumano", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoMaterial", b =>
                {
                    b.HasOne("PeD.Core.Models.Catalogos.CategoriaContabil", "CategoriaContabil")
                        .WithMany()
                        .HasForeignKey("CategoriaContabilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.RecursoMaterial+Alocacao", b =>
                {
                    b.HasOne("PeD.Core.Models.Empresa", "EmpresaFinanciadora")
                        .WithMany()
                        .HasForeignKey("EmpresaFinanciadoraId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Empresa", "EmpresaRecebedora")
                        .WithMany()
                        .HasForeignKey("EmpresaRecebedoraId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Etapa", "Etapa")
                        .WithMany()
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PeD.Core.Models.Propostas.RecursoMaterial", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Propostas.Risco", b =>
                {
                    b.HasOne("PeD.Core.Models.Propostas.Proposta", "Proposta")
                        .WithMany()
                        .HasForeignKey("PropostaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeD.Core.Models.Fornecedores.Fornecedor", b =>
                {
                    b.HasOne("PeD.Core.Models.ApplicationUser", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId");
                });

            modelBuilder.Entity("PeD.Core.Models.Demandas.DemandaFile", b =>
                {
                    b.HasOne("PeD.Core.Models.Demandas.Demanda", "Demanda")
                        .WithMany()
                        .HasForeignKey("DemandaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
